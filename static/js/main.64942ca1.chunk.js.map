{"version":3,"sources":["utils/utils.ts","utils/request.ts","servers/unpkg.ts","models/global.ts","models lazy /^/.//.*/.ts$/ groupOptions: {} namespace object","models/index.tsx","routes/router.tsx","index.tsx"],"names":["splitUrl","url","options","urlNew","paramsArray","Object","keys","forEach","key","push","length","test","join","nameSort","data","dirs","files","item","type","sort","a","b","path","replace","localeCompare","dataFilesSort","map","file","codeMessage","200","201","202","204","400","401","403","404","406","410","422","500","502","503","504","request","method","newOptions","body","headers","Accept","axios","then","response","catch","err","status","errortext","statusText","error","Error","name","getFileContent","createModel","state","pkgname","selectFile","content","extname","package","showSearch","reducers","update","payload","effects","dispatch","setPkgname","params","dph","org","filename","global","getDirectoryTrees","_","pkg","dataSort","getPackageJSON","filepath","JSON","stringify","webpackAsyncContext","req","Promise","resolve","__webpack_require__","o","e","code","id","module","exports","loading","createLoadingPlugin","store","init","models","plugins","routers","component","routes","ReactDOM","render","isHashRouter","loadModels","m","md","modelData","default","model","document","getElementById"],"mappings":"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","file":"static/js/main.64942ca1.chunk.js","sourcesContent":["import { Files } from '@/models/global';\n\n// 拼接url参数\nexport function splitUrl(url: string, options: { [x: string]: any }) {\n  let urlNew = url;\n  const paramsArray: string[] = [];\n  // Object.keys(options).forEach(key => paramsArray.push(key + '=' + options[key]));\n  Object.keys(options).forEach((key) =>\n    paramsArray.push(`${key}=${options[key]}`),\n  );\n  if (Object.keys(options).length === 0) {\n    return url;\n  }\n  if (/\\?/.test(urlNew) === false) {\n    urlNew = `${urlNew}?${paramsArray.join('&')}`;\n  } else {\n    urlNew += `&${paramsArray.join('&')}`;\n  }\n  return urlNew;\n}\n\nexport function nameSort(data: Files[] = [], resule: Files[] = []) {\n  let dirs: Files[] = [];\n  let files: Files[] = []\n  data.forEach((item) => {\n    if (item.type === 'directory') {\n      dirs.push(item);\n    } else if (item.type === 'file') {\n      files.push(item);\n    }\n  });\n  dirs = dirs.sort((a, b) => {\n    return a.path.replace(/^\\//, '').localeCompare(b.path.replace(/^\\//, ''));\n  });\n  files = files.sort((a, b) => {\n    return a.path.replace(/^\\//, '').localeCompare(b.path.replace(/^\\//, ''));\n  });\n  return [...dirs, ...files];\n}\n\nexport function dataFilesSort(files: Files[] = [], resule: Files[] = []) {\n  resule = nameSort(files);\n  resule = resule.map<Files>((file) => {\n    if (file.files) {\n      file.files = dataFilesSort(file.files);\n    }\n    return file;\n  });\n  return resule;\n}","import axios, { AxiosRequestConfig } from 'axios';\n// import history from '../routes/history';\nimport { splitUrl } from './utils';\n\n// Get the current location.\n// const location = history.location;\nconst codeMessage = {\n  200: '服务器成功返回请求的数据。',\n  201: '新建或修改数据成功。',\n  202: '一个请求已经进入后台排队（异步任务）。',\n  204: '删除数据成功。',\n  400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\n  401: '用户没有权限（令牌、用户名、密码错误）。',\n  403: '用户得到授权，但是访问是被禁止的。',\n  404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\n  406: '请求的格式不可得。',\n  410: '请求的资源被永久删除，且不会再得到的。',\n  422: '当创建一个对象时，发生一个验证错误。',\n  500: '服务器发生错误，请检查服务器。',\n  502: '网关错误。',\n  503: '服务不可用，服务器暂时过载或维护。',\n  504: '网关超时。',\n};\n\nexport interface Options extends AxiosRequestConfig {\n  body?: any;\n}\n\n/**\n * Requests a URL, returning a promise.\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n * @return {object}           An object containing either \"data\" or \"err\"\n */\nexport default function request(url: string, options: Options = {}) {\n  const method = options.method || 'GET';\n  const newOptions: Options = {\n    url,\n    method,\n    data: options.body,\n    headers: {\n      'Content-Type': 'application/json; charset=utf-8',\n      Accept: 'application/json',\n    },\n  };\n\n  if (/(GET)/.test(method)) {\n    newOptions.url = splitUrl(url, { ...options.body });\n    delete newOptions.body;\n  }\n\n  return axios\n    .request(newOptions)\n    .then((response) => {\n      return response.data;\n    })\n    .catch((err) => {\n      const response = err.response;\n      if (response && response.status >= 200 && response.status < 300) {\n        return response;\n      }\n      if (!response) {\n        return;\n      }\n      const status = response.status;\n      const errortext = (codeMessage as any)[status] || response.statusText;\n      // Notification.error({\n      //   message: '错误提示：',\n      //   description: (response.data && response.data.info) || '没有错误提示',\n      // });\n      const error = new Error(errortext);\n      error.name = response.status;\n      // error.response = response;\n      if (response.data) {\n        return response.data;\n      }\n      throw error;\n    });\n}\n","import request from '../utils/request';\n\n\nexport function getDirectoryTrees(pkg: string) {\n  return request(`https://unpkg.com/${pkg}/?meta`, {\n    method: 'GET',\n  });\n}\n\nexport function getFileContent(path: string) {\n  return request(`https://unpkg.com/${path}`, {\n    method: 'GET',\n  });\n}\n","import { createModel } from '@rematch/core';\nimport { Dispatch } from './';\nimport { getDirectoryTrees, getFileContent } from '@/servers/unpkg';\nimport {dataFilesSort} from '@/utils/utils';\n\nexport interface Files {\n  path: string;\n  type: 'directory' | 'file';\n  extname: string;\n  integrity: string;\n  lastModified: string;\n  size: number;\n  files?: Files[];\n}\n\nexport interface PackageJSON {\n    name: string;\n    version: string;\n    description: string;\n    author: string;\n    homepage?: string;\n    repository?: {\n      type?: string;\n      url?: string;\n    } | string;\n    license: string;\n    main: string;\n    module: string;\n    files: string[];\n    publishConfig?: {\n      [key: string]: any;\n    }\n    keywords: string[];\n    peerDependencies?: {\n      [key: string]: string;\n    }\n    dependencies?: {\n      [key: string]: string;\n    }\n    devDependencies?: {\n      [key: string]: string;\n    }\n    gitHead?: string;\n}\n\nexport interface GlobalState {\n  pkgname?: string;\n  selectFile?: string;\n  content?: string;\n  extname?: string;\n  showSearch?: boolean;\n  package?: PackageJSON;\n  files?: Files[]\n}\n\nexport type Params = {\n  org?: string;\n  name?: string;\n  filename?: string;\n}\n\nexport default createModel({\n  state: {\n    pkgname: '',\n    files: [],\n    selectFile: '',\n    content: '',\n    extname: '',\n    package: {} as PackageJSON,\n    showSearch: false,\n  },\n  reducers: {\n    update: (state: any, payload: GlobalState): GlobalState => ({\n      ...state,\n      ...payload,\n    }),\n  },\n  effects: (dispatch: any) => ({\n    async setPkgname(params: Params = {}) {\n      const dph = dispatch as Dispatch;\n      const { name, org } = params;\n      const state: GlobalState = {};\n      if (!org && name) {\n        state.pkgname = name;\n      } else if (org && name) {\n        state.pkgname = `${org}/${name}`;\n      }\n      if (params.filename) {\n        state.selectFile = params.filename;\n      }\n      dph.global.update({ ...state });\n    },\n    async getDirectoryTrees(_, { global }: { global: GlobalState}) {\n      const dph = dispatch as Dispatch;\n      const data: Files = await getDirectoryTrees(global.pkgname!);\n      if (data && data.files) {\n        const dataSort = dataFilesSort(data.files);\n        dph.global.update({ files: dataSort });\n      }\n    },\n    async getPackageJSON(_, { global }: { global: GlobalState}) {\n      const dph = dispatch as Dispatch;\n      const data: PackageJSON = await getFileContent(`${global.pkgname}/package.json`);\n      if (data && typeof data === 'object') {\n        dph.global.update({ package: {...data} });\n      }\n    },\n    async getFileContent(filepath: string = '', { global }: { global: GlobalState}) {\n      const dph = dispatch as Dispatch;\n      if (!filepath) {\n        dph.global.update({ content: '', extname: '' });\n        return;\n      };\n      const type = filepath.replace(/.+\\./,'');\n      const data: PackageJSON = await getFileContent(`${global.pkgname}/${filepath}`);\n      if (typeof data === 'string' || !data) {\n        dph.global.update({ content: data, extname: type });\n      } else if (data && /\\.(json|map)$/.test(filepath)) {\n        dph.global.update({ content: JSON.stringify(data, null, 2), extname: type });\n      }\n    },\n  }),\n});\n","var map = {\n\t\"./global.ts\": 22\n};\n\nfunction webpackAsyncContext(req) {\n\treturn Promise.resolve().then(function() {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\n\t\tvar id = map[req];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 79;\nmodule.exports = webpackAsyncContext;","import {\n  init,\n  RematchRootState,\n  RematchDispatch,\n  Models,\n  ModelEffects,\n  ModelConfig,\n} from '@rematch/core';\nimport createLoadingPlugin from '@rematch/loading';\nimport global from './global';\n\n// no need to extend from Models\nexport interface RootModel extends Models {\n  global: typeof global;\n}\n\nexport type ExtractRematchLoadingFromEffectsObject<\n  effects extends ModelEffects<any>\n> = { [effectKey in keyof effects]: boolean };\n\nexport type ExtractRematchLoadingFromEffects<\n  effects extends ModelConfig['effects']\n> = effects extends (...args: any[]) => infer R\n  ? R extends ModelEffects<any>\n    ? ExtractRematchLoadingFromEffectsObject<R>\n    : {}\n  : effects extends ModelEffects<any>\n  ? ExtractRematchLoadingFromEffectsObject<effects>\n  : {};\n\ninterface LoadingState<M extends Models> {\n  loading: {\n    global: boolean;\n    models: { [k in keyof M]: boolean };\n    effects: {\n      [k in keyof M]: ExtractRematchLoadingFromEffects<M[k]['effects']>;\n    };\n  };\n}\n\nconst loading = createLoadingPlugin({});\n\nexport const store = init({\n  models: {\n    global: global,\n  },\n  plugins: [loading],\n});\n\nexport const { dispatch } = store;\n\nexport type Store = typeof store;\nexport type Dispatch = RematchDispatch<RootModel>;\nexport type RootState = RematchRootState<RootModel> & LoadingState<RootModel>;\n","import { Routers } from '@uiw-admin/router-control';\n\nexport const routers: Routers[] = [\n  {\n    path: '/',\n    component: () => import('../layouts/BasicLayout'),\n    routes: [\n      {\n        path: '/',\n        component: () => import('../pages/Home'),\n      },\n      {\n        path: \"/pkg/:name\",\n        component: () => import('../pages/Preview'),\n      },\n      {\n        path: \"/pkg/:name/file/:filename(.*)\",\n        component: () => import('../pages/Preview'),\n      },\n      {\n        path: \"/pkg/:org/:name\",\n        component: () => import('../pages/Preview'),\n      },\n      {\n        path: \"/pkg/:org/:name/file/:filename(.*)\",\n        component: () => import('../pages/Preview'),\n      },\n    ],\n  },\n];\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport '@uiw/reset.css';\nimport Controller from '@uiw-admin/router-control';\nimport { store } from './models';\nimport { routers } from './routes/router';\nimport './index.css';\n\nReactDOM.render( \n  <Provider store={store}>\n    <Controller\n      isHashRouter\n      routes={routers}\n      loadModels={(models = []) => {\n        return models.map((m) => {\n          return import(`./models/${m}.ts`).then((md) => {\n            const modelData = md.default || md;\n            store.model({ name: m, ...modelData });\n          });\n        })\n      }}\n    />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}